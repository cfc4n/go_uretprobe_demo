// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x41\x68\x13\x5b\x14\x3d\x93\xb4\x4d\x7e\xfa\xe1\xf7\xff\x0f\xe5\x33\xbf\x8b\x40\x29\xfc\x2f\x25\xb6\x22\xa5\x64\x55\x28\x55\x17\x05\xa5\x74\x51\x28\x32\x9d\xce\x3c\xd3\xd2\x66\x12\x27\x13\x35\x1d\x41\x11\x04\x5d\xba\x10\xea\xae\xa5\xba\x70\xd7\x5d\xdc\xd5\x85\xa0\x4b\x97\x2e\xbb\x2c\xb8\x89\x2b\x83\x14\x47\xee\x9b\x37\x93\xd7\x37\x19\x51\x2f\xa4\xef\xdd\x33\xef\xbc\x7b\xef\xb9\x77\xa6\xf7\x16\x16\x2f\x65\x34\x0d\x91\x69\xf8\x8c\x9e\xd7\xb3\xd9\xa1\xde\x7e\x4e\xfc\x1d\x86\x86\x76\x36\xc4\xfc\x72\x37\xa0\xb5\x92\x01\xc6\x01\xbc\xcd\x00\x45\x00\xad\xbf\x77\xf9\xf3\x3f\xc6\xc3\x73\x47\xfb\xe1\x9a\xd3\x80\x6e\x10\x04\xed\x0c\x90\x07\xf0\x10\xc0\x00\x9d\xdf\x0b\xef\x79\x2a\x62\x1d\x8d\x86\x6b\x5b\x03\x0a\x00\xb6\xf4\x37\x41\xe4\x5b\x1e\xb3\x2d\xfd\x35\xf7\xff\xd1\x00\x6f\x7e\x9e\x42\xc2\x66\x1e\xf3\xf5\x57\x31\xee\xb0\xdb\x1c\xb7\x6a\x4d\xc7\xd7\x0f\x03\x35\x8f\x43\x91\xc7\xa8\xc8\x83\x4a\x6d\xe7\x44\x5d\x3b\xe1\xf9\x96\x15\xd6\x91\xcb\x02\x23\x29\xfc\x33\x75\xec\x87\x3c\x5f\xef\x24\xe2\x9d\x06\x41\x70\x74\x80\xf8\xbe\x8e\xe0\x0f\x08\xfe\xcd\x94\xb8\xff\xfd\x54\xdc\x93\x44\xdc\xae\x12\xf7\xa4\x4f\x5c\xae\x57\xb3\x5a\xa6\x33\x13\x76\x01\xbe\xfe\x21\xd6\x71\xa2\x3e\xc9\x75\x74\x99\x67\xf8\xfa\xfb\x18\x6f\x56\x8b\x26\xd7\xdd\x76\xcb\xbe\xfe\x2e\xc6\xed\xc9\xa2\x4b\x7b\xe6\x19\x8e\x2f\xf5\xa9\x5c\x2e\x3a\xb4\x6f\x56\xcb\x13\x72\x9f\xa8\x3f\xb4\xa7\x3e\x46\x7d\x6a\x3d\x0f\xeb\x30\x5f\x84\x73\x61\x1e\x9c\xa6\xf6\x6f\x4a\xee\x9f\x98\x9f\x68\x8e\x68\x5e\xec\x02\xcd\x4f\x37\x8e\x57\xb4\x99\xc7\xf3\xb3\x68\x5e\x3a\xf2\x1c\xad\xd2\x7e\x69\x61\xf9\x7a\xa4\x63\x72\x8e\x8e\xe3\x39\x24\x6b\xe8\x5f\x12\x79\x1d\x8b\xbc\xfe\xfd\x4e\x5e\x74\x27\xdd\x47\x35\xd3\xdc\xd2\x4c\x17\xa4\xf7\x2e\x7a\x46\x9a\x91\x5e\xa4\x29\xe9\x49\x9a\x93\xde\xd4\x13\x01\x94\xa9\x5f\xd2\x7d\xab\x94\xbf\x74\xe9\xe5\x6b\x8b\xc0\xd7\x20\xe0\x79\x8e\x88\xfb\xb5\x9d\x25\xe4\xef\x0e\x6b\xbf\x53\x8d\xe2\x17\xd9\x9a\xb4\x1f\x03\x70\x51\xf2\xaf\x64\x70\xc6\xe8\xf9\xb2\xe4\xef\xe2\xc7\xec\x01\x9f\xdb\x4f\x41\xbf\x67\x59\x64\xfa\x72\xb2\xc8\xa6\xe0\x03\x09\xec\x7f\x00\x7f\xa2\xf7\xf1\x8a\x4e\xe4\x38\x9e\x4b\xe0\xa4\xcb\x5f\x52\xdc\x48\x83\x39\x8e\xf7\xe2\x46\xf5\x5f\xe5\x78\x2f\x6e\x54\xf7\x98\x58\x69\x3c\xe8\xe8\xac\xe4\xd3\x2d\x2b\x92\xcf\xd9\x25\x8f\xdd\xf1\x60\xdc\x62\x6e\x63\xb3\xe6\xa0\x52\x33\x2a\xcc\x33\x4c\xb7\xd2\xac\x32\xc7\x33\xd6\x5b\x46\xc3\x33\xad\x2d\x18\xdb\x9b\x16\x73\x1a\x0c\x25\x97\x6d\x97\xd8\x86\x71\xc3\x35\xab\x0c\xcd\xba\x5b\x5b\x67\x06\x6f\xbd\x65\xa1\xe9\x32\x4f\x41\xb8\x7b\x3e\x71\x20\x46\xaa\xe6\xa6\x53\xb2\x50\x6a\x78\xae\x67\xae\xa3\xd4\x68\x55\xf9\xea\xd6\x6c\xd3\x33\x09\x9e\x2e\x4d\xcf\xf4\x15\xfe\x17\xec\xb1\xd0\x41\xb5\x47\x83\xe1\xfa\x52\xc1\xd5\xff\x49\x9a\xf8\x0d\x29\xf8\x9c\x58\xd7\x14\x3c\xaf\xf8\x66\x0a\x7f\x4f\xac\xea\x7c\xab\xfc\x7a\x0a\xff\x44\xf0\xd4\xf9\x57\xf9\xcf\x04\xff\x82\x82\xdf\x17\xa2\x6c\x29\x78\xfc\xbe\x8a\xf5\x9c\x34\x4b\xb2\x7d\x14\x80\xfa\x26\xa8\xfa\xe5\x53\xf8\x9d\x14\xbe\xea\xcf\x48\xb3\x2d\x5b\x57\xf0\xeb\x7d\xe2\xc9\x46\x75\xff\x86\xa4\xad\x88\xfe\x4f\x09\xbf\x20\xb8\x11\x3f\xd2\xe1\x49\x9f\xd8\x64\x1b\x22\xd1\x8e\xf0\x29\xc7\x41\x89\x1f\x7d\xdf\xbe\x05\x00\x00\xff\xff\x42\xd0\x23\x59\xf8\x08\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2296,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1683187384, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
